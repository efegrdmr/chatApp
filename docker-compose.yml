services:
  db:
    image: postgres:18
    container_name: db
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
    - "${DB_PORT}:5432"
    volumes:
      - dbdata:/var/lib/postgresql
    networks:
      - app-network

  api:
    build:
      context: ./app/api
      dockerfile: Dockerfile
    container_name: api
    restart: always
    env_file:
      - .env
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      JWT_ISSUER: ${JWT_ISSUER}
      JWT_AUDIENCE: ${JWT_AUDIENCE}
      JWT_SECRET: ${JWT_SECRET}
      ASPNETCORE_URLS: "http://0.0.0.0:5000;https://0.0.0.0:5001"
      ASPNETCORE_Kestrel__Endpoints__Http__Url: "http://0.0.0.0:5000"
      ASPNETCORE_Kestrel__Endpoints__Https__Url: "https://0.0.0.0:5001"
      ASPNETCORE_Kestrel__Endpoints__Https__Certificate__Path: "/certs/localhost.pfx"
      ASPNETCORE_Kestrel__Endpoints__Https__Certificate__Password: ${CERT_PASSWORD}
    expose:
      - "5000"
      - "5001"
    ports:
      - "5000:5000"
      - "5001:5001"
    depends_on:
      - db
    volumes:
      - ./certs:/certs:ro
    networks:
      - app-network

  web:
    build:
      context: ./app/web
      dockerfile: Dockerfile
      args:
        API_BASE_URL: ${API_BASE_URL}
    container_name: web
    restart: always
    env_file:
      - .env
    environment:
      API_BASE_URL: ${API_BASE_URL}
      NODE_EXTRA_CA_CERTS: /certs/localhost-cert.pem
    ports:
      - "${WEB_PORT}:3000"
    depends_on:
      - api
    volumes:
      - ./certs:/certs:ro
    networks:
      - app-network
  web-proxy:
    image: nginx:alpine
    container_name: web-proxy
    restart: always
    depends_on:
      - web
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./certs:/certs:ro
    ports:
      - "3443:443"
      - "3080:80"
    networks:
      - app-network


volumes:
  dbdata:

networks:
  app-network:
